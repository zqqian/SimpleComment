// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package comment

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Com struct {
	Id        int32  `thrift:"id,1" json:"id"`
	UserId    int32  `thrift:"user_id,2" json:"user_id"`
	ArticleId int32  `thrift:"article_id,3" json:"article_id"`
	ReplyId   int32  `thrift:"reply_id,4" json:"reply_id"`
	Username  string `thrift:"username,5" json:"username"`
	Content   string `thrift:"content,6" json:"content"`
	Time      string `thrift:"time,7" json:"time"`
}

func NewCom() *Com {
	return &Com{}
}

func (p *Com) GetId() int32 {
	return p.Id
}

func (p *Com) GetUserId() int32 {
	return p.UserId
}

func (p *Com) GetArticleId() int32 {
	return p.ArticleId
}

func (p *Com) GetReplyId() int32 {
	return p.ReplyId
}

func (p *Com) GetUsername() string {
	return p.Username
}

func (p *Com) GetContent() string {
	return p.Content
}

func (p *Com) GetTime() string {
	return p.Time
}
func (p *Com) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Com) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *Com) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *Com) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ArticleId = v
	}
	return nil
}

func (p *Com) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ReplyId = v
	}
	return nil
}

func (p *Com) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *Com) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *Com) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Time = v
	}
	return nil
}

func (p *Com) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("com"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Com) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *Com) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:user_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.user_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:user_id: %s", p, err)
	}
	return err
}

func (p *Com) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("article_id", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:article_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ArticleId)); err != nil {
		return fmt.Errorf("%T.article_id (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:article_id: %s", p, err)
	}
	return err
}

func (p *Com) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reply_id", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:reply_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReplyId)); err != nil {
		return fmt.Errorf("%T.reply_id (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:reply_id: %s", p, err)
	}
	return err
}

func (p *Com) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.username (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:username: %s", p, err)
	}
	return err
}

func (p *Com) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:content: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return fmt.Errorf("%T.content (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:content: %s", p, err)
	}
	return err
}

func (p *Com) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("time", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:time: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Time)); err != nil {
		return fmt.Errorf("%T.time (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:time: %s", p, err)
	}
	return err
}

func (p *Com) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Com(%+v)", *p)
}
